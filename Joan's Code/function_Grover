"""
Grover search on n bits
"""

def Grover(n):

    
    import numpy as np
    from qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, transpile
    from qiskit.providers.aer import QasmSimulator
    from qiskit.visualization import plot_histogram


    # Use Aer's qasm_simulator
    simulator = QasmSimulator()

    # Create a Quantum Circuit acting on the q register
    qr = QuantumRegister(n, 'q')
    cr = ClassicalRegister(n, 'c')
    circuit = QuantumCircuit(qr, cr)

#initialize input state as all 1s
for i in range(0,n):
        circuit.x(i)

# Add a H gate on all qubits
    for i in range(0,n):
            circuit.h(i)
            
# mark the bit string m for the oracle
mark = -1
#user input of parked state to search
while mark <= 0 or n <= mark:
    mark = int(input("Which bit 0<=m<=n would you like to mark? "))
    if mark >= n:
        print("Invalid entry, m can not be greater than n")
        
        mark = int(input("Which bit 0<=m<=n would you like to mark? "))
    if mark <= 0:
        print("Invalid entry, m must be positive")
        print(f"You have marked", mark)
        
        mark = int(input("Which bit 0<=m<=n would you like to mark? "))
    else:
        print(f"You have marked", mark)
    
    #Oracle(mark)

#Simplified diffusion operator applied sqrt(n) times
for j in range(0, np.floor(np.sqrt(n))):

    for i in range(0,n-1):
            circuit.h(i)
    #h(n)            
    #Toffoli(n)
    #h(n)
    for i in range(0,n-1):
            circuit.h(i)
            

# Map the quantum measurement to the classical bits
    circuit.measure(qr, cr)

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)
    compiled_circuit = transpile(circuit, simulator)

# Execute the circuit on the qasm simulator
    job = simulator.run(compiled_circuit, shots=1)

# Grab results from the job
    result = job.result()


# Returns counts
    counts = result.get_counts(compiled_circuit)
    print(counts)
    
# Draw the circuit
#circuit.draw()
